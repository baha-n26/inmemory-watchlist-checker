name: Claude PR Assistant (Bedrock)

on:
  # Manual ‚Äú@claude ‚Ä¶‚Äù triggers
  issue_comment:            { types: [created] }
  pull_request_review_comment:
    { types: [created] }
  pull_request_review:      { types: [submitted] }
  issues:                   { types: [opened, assigned] }

  # Automatic review on every PR push / creation
  pull_request:             { types: [opened, synchronize] }

############################
# 1. MANUAL ‚Äú@claude ‚Ä¶‚Äù JOB #
############################
jobs:
  claude-manual:
    if: |
      (github.event_name == 'issue_comment' &&
       contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' &&
       contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' &&
       contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' &&
       contains(github.event.issue.body, '@claude'))

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read

    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:            eu-central-1       # Bedrock region

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude (manual trigger) via Bedrock
        uses: anthropics/claude-code-action@beta
        with:
          use_bedrock: "true"
          model: "arn:aws:bedrock:eu-central-1:538639307912:application-inference-profile/bsfdqs400k7z"
          timeout_minutes: "60"
          trigger_phrase: "@claude"        # only reply when explicitly tagged

  ##########################
  # 2. AUTOMATIC PR REVIEW #
  ##########################
  claude-auto-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read

    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:            eu-central-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Claude Automatic PR Review via Bedrock
        uses: anthropics/claude-code-action@beta
        with:
          use_bedrock: "true"
          model: "arn:aws:bedrock:eu-central-1:538639307912:application-inference-profile/bsfdqs400k7z"
          timeout_minutes: "60"

          # ===== Project-specific structured review prompt =====
          direct_prompt: |
            You are the automated code-review assistant for this repository, a Kotlin-based backend/API project (Kotlin API v2.1).  
            Provide a thorough, structured review using the following template.

            ---
            ## 1. Summary
            ‚Ä¢ Briefly describe the intent of the PR and its architectural impact.  
            ‚Ä¢ Note any new modules, services, or significant refactors.

            ## 2. Architectural & Design Considerations
            ‚Ä¢ Alignment with existing hexagonal / layered architecture.  
            ‚Ä¢ Separation of concerns (domain, application, infrastructure).  
            ‚Ä¢ Dependency-injection usage (e.g., Koin/Hilt/Spring).  
            ‚Ä¢ Thread-safety and coroutine context handling.

            ## 3. API & Contracts
            ‚Ä¢ Breaking-change risk to public endpoints or library consumers.  
            ‚Ä¢ Compliance with versioning and API guidelines (OpenAPI annotations, HTTP codes, error envelopes).  
            ‚Ä¢ Serialization formats (Jackson/Kotlinx) and schema evolution.

            ## 4. Kotlin Code Quality
            ‚Ä¢ Idiomatic Kotlin, use of extension functions, null-safety, sealed classes, and data classes.  
            ‚Ä¢ Consistency with the project‚Äôs code-style rules (ktlint / detekt).  
            ‚Ä¢ Proper use of suspend functions and structured concurrency.  
            ‚Ä¢ Exhaustive `when` statements and smart-casts.

            ## 5. Testing & Reliability
            ‚Ä¢ Unit and integration test coverage (JUnit5, Kotest, Testcontainers).  
            ‚Ä¢ Deterministic tests and use of fixtures / mocks.  
            ‚Ä¢ CI pipeline impact (runtime, flakiness, required secrets).  
            ‚Ä¢ Observability (logs, metrics, tracing) additions.

            ## 6. Security & Compliance
            ‚Ä¢ Input validation / sanitization (SQL/NoSQL injections, XSS).  
            ‚Ä¢ Secrets management and environment variable usage.  
            ‚Ä¢ OAuth / JWT / session handling where applicable.  
            ‚Ä¢ Dependencies audited for CVEs (Gradle-Vulnerability plugin).

            ## 7. Performance & Scalability
            ‚Ä¢ Algorithmic complexity, memory allocation hotspots.  
            ‚Ä¢ Database query efficiency and indexing.  
            ‚Ä¢ Caching layer adjustments.  
            ‚Ä¢ Coroutine dispatchers and non-blocking IO correctness.

            ## 8. Documentation
            ‚Ä¢ KDoc completeness and accuracy.  
            ‚Ä¢ Updates to README, ADRs, or diagrams.  
            ‚Ä¢ OpenAPI / Swagger changes committed.

            ## 9. Suggested Improvements
            ‚Ä¢ List concrete actionable items with severity tags (üî¥ Critical, üü† Major, üü¢ Minor).  
            ‚Ä¢ Include code snippets or file paths for clarity.

            ## 10. Verdict
            ‚Ä¢ Short statement: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT_ONLY`.  
            ‚Ä¢ Rationale in 1-2 sentences.

            ---
            Please keep the tone constructive and concise. Output in Markdown.
